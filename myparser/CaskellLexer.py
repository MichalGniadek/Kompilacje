# Generated from Caskell.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,169,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        18,1,18,3,18,126,8,18,1,18,1,18,5,18,130,8,18,10,18,12,18,133,9,
        18,1,19,4,19,136,8,19,11,19,12,19,137,1,19,1,19,1,19,1,19,3,19,144,
        8,19,1,20,4,20,147,8,20,11,20,12,20,148,1,21,4,21,152,8,21,11,21,
        12,21,153,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,0,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,0,37,18,39,19,41,
        20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,1,0,5,2,0,65,90,97,
        122,3,0,39,39,48,57,95,95,5,0,36,36,42,43,45,45,58,58,60,62,1,0,
        48,57,3,0,9,10,13,13,32,32,174,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,
        3,59,1,0,0,0,5,61,1,0,0,0,7,64,1,0,0,0,9,66,1,0,0,0,11,69,1,0,0,
        0,13,71,1,0,0,0,15,73,1,0,0,0,17,78,1,0,0,0,19,81,1,0,0,0,21,85,
        1,0,0,0,23,88,1,0,0,0,25,93,1,0,0,0,27,100,1,0,0,0,29,105,1,0,0,
        0,31,108,1,0,0,0,33,113,1,0,0,0,35,121,1,0,0,0,37,125,1,0,0,0,39,
        143,1,0,0,0,41,146,1,0,0,0,43,151,1,0,0,0,45,157,1,0,0,0,47,159,
        1,0,0,0,49,161,1,0,0,0,51,163,1,0,0,0,53,165,1,0,0,0,55,167,1,0,
        0,0,57,58,5,59,0,0,58,2,1,0,0,0,59,60,5,46,0,0,60,4,1,0,0,0,61,62,
        5,45,0,0,62,63,5,62,0,0,63,6,1,0,0,0,64,65,5,44,0,0,65,8,1,0,0,0,
        66,67,5,58,0,0,67,68,5,58,0,0,68,10,1,0,0,0,69,70,5,61,0,0,70,12,
        1,0,0,0,71,72,5,95,0,0,72,14,1,0,0,0,73,74,5,102,0,0,74,75,5,117,
        0,0,75,76,5,110,0,0,76,77,5,99,0,0,77,16,1,0,0,0,78,79,5,100,0,0,
        79,80,5,111,0,0,80,18,1,0,0,0,81,82,5,108,0,0,82,83,5,101,0,0,83,
        84,5,116,0,0,84,20,1,0,0,0,85,86,5,105,0,0,86,87,5,102,0,0,87,22,
        1,0,0,0,88,89,5,101,0,0,89,90,5,108,0,0,90,91,5,115,0,0,91,92,5,
        101,0,0,92,24,1,0,0,0,93,94,5,115,0,0,94,95,5,119,0,0,95,96,5,105,
        0,0,96,97,5,116,0,0,97,98,5,99,0,0,98,99,5,104,0,0,99,26,1,0,0,0,
        100,101,5,99,0,0,101,102,5,97,0,0,102,103,5,115,0,0,103,104,5,101,
        0,0,104,28,1,0,0,0,105,106,5,60,0,0,106,107,5,45,0,0,107,30,1,0,
        0,0,108,109,5,102,0,0,109,110,5,114,0,0,110,111,5,111,0,0,111,112,
        5,109,0,0,112,32,1,0,0,0,113,114,5,105,0,0,114,115,5,110,0,0,115,
        116,5,99,0,0,116,117,5,108,0,0,117,118,5,117,0,0,118,119,5,100,0,
        0,119,120,5,101,0,0,120,34,1,0,0,0,121,122,7,0,0,0,122,36,1,0,0,
        0,123,126,3,35,17,0,124,126,5,95,0,0,125,123,1,0,0,0,125,124,1,0,
        0,0,126,131,1,0,0,0,127,130,3,35,17,0,128,130,7,1,0,0,129,127,1,
        0,0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,
        0,0,0,132,38,1,0,0,0,133,131,1,0,0,0,134,136,7,2,0,0,135,134,1,0,
        0,0,136,137,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,144,1,0,
        0,0,139,140,5,96,0,0,140,141,3,37,18,0,141,142,5,96,0,0,142,144,
        1,0,0,0,143,135,1,0,0,0,143,139,1,0,0,0,144,40,1,0,0,0,145,147,7,
        3,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,
        0,0,0,149,42,1,0,0,0,150,152,7,4,0,0,151,150,1,0,0,0,152,153,1,0,
        0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,156,6,21,
        0,0,156,44,1,0,0,0,157,158,5,40,0,0,158,46,1,0,0,0,159,160,5,41,
        0,0,160,48,1,0,0,0,161,162,5,123,0,0,162,50,1,0,0,0,163,164,5,125,
        0,0,164,52,1,0,0,0,165,166,5,91,0,0,166,54,1,0,0,0,167,168,5,93,
        0,0,168,56,1,0,0,0,8,0,125,129,131,137,143,148,153,1,6,0,0
    ]

class CaskellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    Func = 8
    Do = 9
    Let = 10
    If = 11
    Else = 12
    Switch = 13
    Case = 14
    Arrow = 15
    From = 16
    Include = 17
    Identifier = 18
    Operator = 19
    Number = 20
    Whitespace = 21
    LeftParen = 22
    RightParen = 23
    LeftBrace = 24
    RightBrace = 25
    LeftBracket = 26
    RightBracket = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'.'", "'->'", "','", "'::'", "'='", "'_'", "'func'", 
            "'do'", "'let'", "'if'", "'else'", "'switch'", "'case'", "'<-'", 
            "'from'", "'include'", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "Func", "Do", "Let", "If", "Else", "Switch", "Case", "Arrow", 
            "From", "Include", "Identifier", "Operator", "Number", "Whitespace", 
            "LeftParen", "RightParen", "LeftBrace", "RightBrace", "LeftBracket", 
            "RightBracket" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "Func", "Do", "Let", "If", "Else", "Switch", "Case", "Arrow", 
                  "From", "Include", "Letter", "Identifier", "Operator", 
                  "Number", "Whitespace", "LeftParen", "RightParen", "LeftBrace", 
                  "RightBrace", "LeftBracket", "RightBracket" ]

    grammarFileName = "Caskell.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


