# Generated from Caskell.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,185,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,
        1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,3,20,135,
        8,20,1,20,1,20,5,20,139,8,20,10,20,12,20,142,9,20,1,21,1,21,1,21,
        1,21,1,21,3,21,149,8,21,1,22,4,22,152,8,22,11,22,12,22,153,1,22,
        1,22,1,22,1,22,3,22,160,8,22,1,23,4,23,163,8,23,11,23,12,23,164,
        1,24,4,24,168,8,24,11,24,12,24,169,1,24,1,24,1,25,1,25,1,26,1,26,
        1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,0,41,20,43,21,45,22,47,23,49,24,51,25,53,26,
        55,27,57,28,59,29,61,30,1,0,5,2,0,65,90,97,122,3,0,39,39,48,57,95,
        95,4,0,36,36,42,43,45,45,60,62,1,0,48,57,3,0,9,10,13,13,32,32,191,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,
        1,0,0,0,3,65,1,0,0,0,5,67,1,0,0,0,7,70,1,0,0,0,9,72,1,0,0,0,11,74,
        1,0,0,0,13,76,1,0,0,0,15,78,1,0,0,0,17,80,1,0,0,0,19,82,1,0,0,0,
        21,87,1,0,0,0,23,90,1,0,0,0,25,94,1,0,0,0,27,97,1,0,0,0,29,102,1,
        0,0,0,31,109,1,0,0,0,33,114,1,0,0,0,35,117,1,0,0,0,37,122,1,0,0,
        0,39,130,1,0,0,0,41,134,1,0,0,0,43,148,1,0,0,0,45,159,1,0,0,0,47,
        162,1,0,0,0,49,167,1,0,0,0,51,173,1,0,0,0,53,175,1,0,0,0,55,177,
        1,0,0,0,57,179,1,0,0,0,59,181,1,0,0,0,61,183,1,0,0,0,63,64,5,59,
        0,0,64,2,1,0,0,0,65,66,5,46,0,0,66,4,1,0,0,0,67,68,5,45,0,0,68,69,
        5,62,0,0,69,6,1,0,0,0,70,71,5,58,0,0,71,8,1,0,0,0,72,73,5,44,0,0,
        73,10,1,0,0,0,74,75,5,61,0,0,75,12,1,0,0,0,76,77,5,60,0,0,77,14,
        1,0,0,0,78,79,5,62,0,0,79,16,1,0,0,0,80,81,5,124,0,0,81,18,1,0,0,
        0,82,83,5,102,0,0,83,84,5,117,0,0,84,85,5,110,0,0,85,86,5,99,0,0,
        86,20,1,0,0,0,87,88,5,100,0,0,88,89,5,111,0,0,89,22,1,0,0,0,90,91,
        5,108,0,0,91,92,5,101,0,0,92,93,5,116,0,0,93,24,1,0,0,0,94,95,5,
        105,0,0,95,96,5,102,0,0,96,26,1,0,0,0,97,98,5,101,0,0,98,99,5,108,
        0,0,99,100,5,115,0,0,100,101,5,101,0,0,101,28,1,0,0,0,102,103,5,
        115,0,0,103,104,5,119,0,0,104,105,5,105,0,0,105,106,5,116,0,0,106,
        107,5,99,0,0,107,108,5,104,0,0,108,30,1,0,0,0,109,110,5,99,0,0,110,
        111,5,97,0,0,111,112,5,115,0,0,112,113,5,101,0,0,113,32,1,0,0,0,
        114,115,5,60,0,0,115,116,5,45,0,0,116,34,1,0,0,0,117,118,5,102,0,
        0,118,119,5,114,0,0,119,120,5,111,0,0,120,121,5,109,0,0,121,36,1,
        0,0,0,122,123,5,105,0,0,123,124,5,110,0,0,124,125,5,99,0,0,125,126,
        5,108,0,0,126,127,5,117,0,0,127,128,5,100,0,0,128,129,5,101,0,0,
        129,38,1,0,0,0,130,131,7,0,0,0,131,40,1,0,0,0,132,135,3,39,19,0,
        133,135,5,95,0,0,134,132,1,0,0,0,134,133,1,0,0,0,135,140,1,0,0,0,
        136,139,3,39,19,0,137,139,7,1,0,0,138,136,1,0,0,0,138,137,1,0,0,
        0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,42,1,0,0,0,
        142,140,1,0,0,0,143,149,3,41,20,0,144,145,5,40,0,0,145,146,3,45,
        22,0,146,147,5,41,0,0,147,149,1,0,0,0,148,143,1,0,0,0,148,144,1,
        0,0,0,149,44,1,0,0,0,150,152,7,2,0,0,151,150,1,0,0,0,152,153,1,0,
        0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,160,1,0,0,0,155,156,5,96,
        0,0,156,157,3,41,20,0,157,158,5,96,0,0,158,160,1,0,0,0,159,151,1,
        0,0,0,159,155,1,0,0,0,160,46,1,0,0,0,161,163,7,3,0,0,162,161,1,0,
        0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,48,1,0,0,
        0,166,168,7,4,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,
        0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,6,24,0,0,172,50,1,0,0,
        0,173,174,5,40,0,0,174,52,1,0,0,0,175,176,5,41,0,0,176,54,1,0,0,
        0,177,178,5,123,0,0,178,56,1,0,0,0,179,180,5,125,0,0,180,58,1,0,
        0,0,181,182,5,91,0,0,182,60,1,0,0,0,183,184,5,93,0,0,184,62,1,0,
        0,0,9,0,134,138,140,148,153,159,164,169,1,6,0,0
    ]

class CaskellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    Func = 10
    Do = 11
    Let = 12
    If = 13
    Else = 14
    Switch = 15
    Case = 16
    Arrow = 17
    From = 18
    Include = 19
    Identifier = 20
    FuncIdentifier = 21
    Operator = 22
    Number = 23
    Whitespace = 24
    LeftParen = 25
    RightParen = 26
    LeftBrace = 27
    RightBrace = 28
    LeftBracket = 29
    RightBracket = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'.'", "'->'", "':'", "','", "'='", "'<'", "'>'", "'|'", 
            "'func'", "'do'", "'let'", "'if'", "'else'", "'switch'", "'case'", 
            "'<-'", "'from'", "'include'", "'('", "')'", "'{'", "'}'", "'['", 
            "']'" ]

    symbolicNames = [ "<INVALID>",
            "Func", "Do", "Let", "If", "Else", "Switch", "Case", "Arrow", 
            "From", "Include", "Identifier", "FuncIdentifier", "Operator", 
            "Number", "Whitespace", "LeftParen", "RightParen", "LeftBrace", 
            "RightBrace", "LeftBracket", "RightBracket" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "Func", "Do", "Let", "If", "Else", "Switch", 
                  "Case", "Arrow", "From", "Include", "Letter", "Identifier", 
                  "FuncIdentifier", "Operator", "Number", "Whitespace", 
                  "LeftParen", "RightParen", "LeftBrace", "RightBrace", 
                  "LeftBracket", "RightBracket" ]

    grammarFileName = "Caskell.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


