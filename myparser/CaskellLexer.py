# Generated from Caskell.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,168,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,
        3,17,125,8,17,1,17,1,17,5,17,129,8,17,10,17,12,17,132,9,17,1,18,
        4,18,135,8,18,11,18,12,18,136,1,18,1,18,1,18,1,18,3,18,143,8,18,
        1,19,4,19,146,8,19,11,19,12,19,147,1,20,4,20,151,8,20,11,20,12,20,
        152,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,0,35,17,37,18,39,19,41,20,43,
        21,45,22,47,23,49,24,51,25,53,26,1,0,5,2,0,65,90,97,122,3,0,39,39,
        48,57,95,95,5,0,36,36,42,43,45,45,58,58,60,62,1,0,48,57,3,0,9,10,
        13,13,32,32,173,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,
        7,61,1,0,0,0,9,63,1,0,0,0,11,65,1,0,0,0,13,70,1,0,0,0,15,73,1,0,
        0,0,17,77,1,0,0,0,19,80,1,0,0,0,21,85,1,0,0,0,23,92,1,0,0,0,25,97,
        1,0,0,0,27,100,1,0,0,0,29,105,1,0,0,0,31,113,1,0,0,0,33,120,1,0,
        0,0,35,124,1,0,0,0,37,142,1,0,0,0,39,145,1,0,0,0,41,150,1,0,0,0,
        43,156,1,0,0,0,45,158,1,0,0,0,47,160,1,0,0,0,49,162,1,0,0,0,51,164,
        1,0,0,0,53,166,1,0,0,0,55,56,5,59,0,0,56,2,1,0,0,0,57,58,5,46,0,
        0,58,4,1,0,0,0,59,60,5,44,0,0,60,6,1,0,0,0,61,62,5,61,0,0,62,8,1,
        0,0,0,63,64,5,95,0,0,64,10,1,0,0,0,65,66,5,102,0,0,66,67,5,117,0,
        0,67,68,5,110,0,0,68,69,5,99,0,0,69,12,1,0,0,0,70,71,5,100,0,0,71,
        72,5,111,0,0,72,14,1,0,0,0,73,74,5,108,0,0,74,75,5,101,0,0,75,76,
        5,116,0,0,76,16,1,0,0,0,77,78,5,105,0,0,78,79,5,102,0,0,79,18,1,
        0,0,0,80,81,5,101,0,0,81,82,5,108,0,0,82,83,5,115,0,0,83,84,5,101,
        0,0,84,20,1,0,0,0,85,86,5,115,0,0,86,87,5,119,0,0,87,88,5,105,0,
        0,88,89,5,116,0,0,89,90,5,99,0,0,90,91,5,104,0,0,91,22,1,0,0,0,92,
        93,5,99,0,0,93,94,5,97,0,0,94,95,5,115,0,0,95,96,5,101,0,0,96,24,
        1,0,0,0,97,98,5,60,0,0,98,99,5,45,0,0,99,26,1,0,0,0,100,101,5,102,
        0,0,101,102,5,114,0,0,102,103,5,111,0,0,103,104,5,109,0,0,104,28,
        1,0,0,0,105,106,5,105,0,0,106,107,5,110,0,0,107,108,5,99,0,0,108,
        109,5,108,0,0,109,110,5,117,0,0,110,111,5,100,0,0,111,112,5,101,
        0,0,112,30,1,0,0,0,113,114,5,115,0,0,114,115,5,116,0,0,115,116,5,
        114,0,0,116,117,5,117,0,0,117,118,5,99,0,0,118,119,5,116,0,0,119,
        32,1,0,0,0,120,121,7,0,0,0,121,34,1,0,0,0,122,125,3,33,16,0,123,
        125,5,95,0,0,124,122,1,0,0,0,124,123,1,0,0,0,125,130,1,0,0,0,126,
        129,3,33,16,0,127,129,7,1,0,0,128,126,1,0,0,0,128,127,1,0,0,0,129,
        132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,36,1,0,0,0,132,130,
        1,0,0,0,133,135,7,2,0,0,134,133,1,0,0,0,135,136,1,0,0,0,136,134,
        1,0,0,0,136,137,1,0,0,0,137,143,1,0,0,0,138,139,5,96,0,0,139,140,
        3,35,17,0,140,141,5,96,0,0,141,143,1,0,0,0,142,134,1,0,0,0,142,138,
        1,0,0,0,143,38,1,0,0,0,144,146,7,3,0,0,145,144,1,0,0,0,146,147,1,
        0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,40,1,0,0,0,149,151,7,4,
        0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,0,
        0,0,153,154,1,0,0,0,154,155,6,20,0,0,155,42,1,0,0,0,156,157,5,40,
        0,0,157,44,1,0,0,0,158,159,5,41,0,0,159,46,1,0,0,0,160,161,5,123,
        0,0,161,48,1,0,0,0,162,163,5,125,0,0,163,50,1,0,0,0,164,165,5,91,
        0,0,165,52,1,0,0,0,166,167,5,93,0,0,167,54,1,0,0,0,8,0,124,128,130,
        136,142,147,152,1,6,0,0
    ]

class CaskellLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    Func = 6
    Do = 7
    Let = 8
    If = 9
    Else = 10
    Switch = 11
    Case = 12
    Arrow = 13
    From = 14
    Include = 15
    Struct = 16
    Identifier = 17
    Operator = 18
    Number = 19
    Whitespace = 20
    LeftParen = 21
    RightParen = 22
    LeftBrace = 23
    RightBrace = 24
    LeftBracket = 25
    RightBracket = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'.'", "','", "'='", "'_'", "'func'", "'do'", "'let'", 
            "'if'", "'else'", "'switch'", "'case'", "'<-'", "'from'", "'include'", 
            "'struct'", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "Func", "Do", "Let", "If", "Else", "Switch", "Case", "Arrow", 
            "From", "Include", "Struct", "Identifier", "Operator", "Number", 
            "Whitespace", "LeftParen", "RightParen", "LeftBrace", "RightBrace", 
            "LeftBracket", "RightBracket" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "Func", "Do", 
                  "Let", "If", "Else", "Switch", "Case", "Arrow", "From", 
                  "Include", "Struct", "Letter", "Identifier", "Operator", 
                  "Number", "Whitespace", "LeftParen", "RightParen", "LeftBrace", 
                  "RightBrace", "LeftBracket", "RightBracket" ]

    grammarFileName = "Caskell.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


